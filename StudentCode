#include <iostream>
#include <chrono>
#include <stack>

using namespace std;

class Node
{
public:
	int value;
	Node* rightSubtree;
	Node* leftSubtree;
	int Height;


};
Node* CreateNode(int aValue)
{
	Node* aNode = new Node;
	aNode->value = aValue;
	aNode->rightSubtree = nullptr;
	aNode->leftSubtree = nullptr;
	aNode->Height = 1;
	return aNode;
}
//To calculate if a key being inserted
//is less than or greater than the node
//it is being compared to.
int Height(Node* atNode)
{
	return atNode == nullptr ? 0 : atNode->Height;
}

int Max(int a, int b)
{
	return a > b ? a : b;
}

int Balance(Node* aNode)
{
	return Height(aNode->leftSubtree) - Height(aNode->rightSubtree);
}

Node* Sling(Node* ProblemRoot, int Imbalance)
{
	Node* NewRoot = nullptr;
	if (Imbalance < 0)
	{
		//Left Rotation
		//Right subtree becomes root
		//Right subtree's left subtree
		//becomes new root's left subtree's right subtree

		NewRoot = ProblemRoot->rightSubtree;
		Node* temporary = NewRoot->leftSubtree;
		NewRoot->leftSubtree = ProblemRoot;
		ProblemRoot->rightSubtree = temporary;

		ProblemRoot->Height = Max(Height(ProblemRoot->leftSubtree), Height(ProblemRoot->rightSubtree)) + 1;
		NewRoot->Height = Max(Height(NewRoot->leftSubtree), Height(NewRoot->rightSubtree)) + 1;
		return NewRoot;
	}
	else
	{
		//RightRotation
		//Left subtree becomes root
		//Left subtree's right subtree
		//becomes new root's right subtree's left subtree

		NewRoot = ProblemRoot->leftSubtree;
		Node* temporary = NewRoot->rightSubtree;
		NewRoot->rightSubtree = ProblemRoot;
		ProblemRoot->leftSubtree = temporary;

		ProblemRoot->Height = Max(Height(ProblemRoot->leftSubtree), Height(ProblemRoot->rightSubtree)) + 1;
		NewRoot->Height = Max(Height(NewRoot->leftSubtree), Height(NewRoot->rightSubtree)) + 1;

		return NewRoot;
	}
}

Node* Swap(Node* ProblemRoot, int Imbalance)
{
	if (Imbalance < 0)
	{
		//Right rotate right child
		ProblemRoot->rightSubtree = Sling(ProblemRoot->rightSubtree, 2);
		//Right rotate root
		ProblemRoot = Sling(ProblemRoot, -2);
	}
	else
	{
		//Left rotate left child
		ProblemRoot->leftSubtree = Sling(ProblemRoot->leftSubtree, -2);
		//Left rotate root
		ProblemRoot = Sling(ProblemRoot, 2);
	}

	return ProblemRoot;
}


Node* Insert(Node* AtNode, int key)
{
	//First, figure out where to put the node
	//Go down the subtree to find where to put the node,
	//But then you must also come back up the tree.
	if (AtNode == nullptr)
		return(CreateNode(key));

	if (key > AtNode->value)
		AtNode->rightSubtree = Insert(AtNode->rightSubtree, key);

	if (key < AtNode->value)
		AtNode->leftSubtree = Insert(AtNode->leftSubtree, key);

	//Update height
	AtNode->Height = Max(Height(AtNode->leftSubtree), Height(AtNode->rightSubtree)) + 1;


	//When coming back up all the way to the root,
	//Make sure that every Node still has balance.

	int balance = Balance(AtNode);

	if (balance > 1)
	{
		if (Balance(AtNode->leftSubtree) < 0)
		{
			return Swap(AtNode, balance);
		}
		else
			return Sling(AtNode, balance);
	}

	if (balance < -1)
	{
		{
			if (Balance(AtNode->rightSubtree) > 0)
			{
				return Swap(AtNode, balance);
			}
			else
				return Sling(AtNode, balance);
		}
	}

	return AtNode;
}

void Delete(Node* AtNode, int key)
{

	Node* Root = AtNode;
	stack<Node*> ForBalanceChecking;

	while (AtNode->value != key)
	{

		if (AtNode->value != key && (AtNode->leftSubtree == nullptr) && (AtNode->rightSubtree == nullptr))
			return;

		if (AtNode->value < key)
			AtNode = AtNode->rightSubtree;
		else
			AtNode = AtNode->leftSubtree;

		ForBalanceChecking.push(AtNode);

	}

	if (AtNode->leftSubtree != nullptr || AtNode->rightSubtree != nullptr)
	{

		if (AtNode->rightSubtree == nullptr)
		{

			Node* Seeker = AtNode->leftSubtree; //Seeks the rightmost node in the left sub-tree
			Node* Previous = AtNode;

			while ((Seeker->rightSubtree != nullptr) && (Seeker != nullptr))
			{

				ForBalanceChecking.push(Seeker);
				Previous = Seeker;
				Seeker = Seeker->rightSubtree;

			}

			AtNode->value = Seeker->value;

			if (Seeker->leftSubtree != nullptr)
				Previous->rightSubtree = Seeker->leftSubtree;

			delete Seeker;

		}
		else
		{

			Node* Seeker = AtNode->rightSubtree; //Seeks the leftmost node in the right sub-tree
			Node* Previous = AtNode;

			while ((Seeker->leftSubtree != nullptr) && (Seeker != nullptr))
			{

				ForBalanceChecking.push(Seeker);
				Previous = Seeker;
				Seeker = Seeker->leftSubtree;

			}

			AtNode->value = Seeker->value;

			if (Seeker->rightSubtree != nullptr)
				Previous->leftSubtree = Seeker->rightSubtree;
			else
				Previous->leftSubtree = nullptr;

			Seeker = nullptr;

		}

	}
	else
		AtNode = nullptr;

	while (!(ForBalanceChecking.empty()))
	{

		int balance = Balance(ForBalanceChecking.top());

		if (-1 > balance || 1 < balance)
		{

			if (balance > 1)
			{

				if (Balance(ForBalanceChecking.top()->leftSubtree) < 0)
					Swap(ForBalanceChecking.top(), balance);
				else
					Sling(ForBalanceChecking.top(), balance);

			}
			else if (balance < -1)
			{

				if (Balance(ForBalanceChecking.top()->rightSubtree) > 0)
					Swap(ForBalanceChecking.top(), balance);
				else
					Sling(ForBalanceChecking.top(), balance);

			}

		}
		else
			ForBalanceChecking.pop();

	}
}

void preOrder(Node *root)
{
	if (root != nullptr)
	{
		cout << root->value << " ";
		preOrder(root->leftSubtree);
		preOrder(root->rightSubtree);
	}
}

void main()
{

	Node* Root = CreateNode(10);
	Root = Insert(Root, 5);
	Root = Insert(Root, 2);
	Root = Insert(Root, 7);
	Root = Insert(Root, 3);
	Root = Insert(Root, 11);
	Root = Insert(Root, 15);
	Root = Insert(Root, 20);
	Root = Insert(Root, 13);

	preOrder(Root);

	Delete(Root, 11);

	system("PAUSE");
	return;
}
